TODO.LIST
---------


CHANGE FROM PURE INHERITANCE TO COMPSITION-OVER-INHERITANCE CODE STRUCTURE

Implement everything into classes:
	-zHalo for a halo at a given z. Has all quantities of interest
	-profile for creating the profiles
	-simulation for doing the initial processing of merger trees
	 and finding halos of interest. This returns zHalo instances.
	 FUNCTION TO CONVERT zHALO TO DATAFRAME.
        -Halo class that generalizes zHalo to a number of redshifts. Halo and
   	 zHalo dont include particle data, only simple quantities such as center,
	 rvir, mass, rH, Mdyn etc.

Divide current script into multiple callable functions:
	-One for creating the ARRAKIHS_Infall table at Rref
	-One to compute quantities such as rH, Mdyn etc
	-One for plotting the comparison. User can provide tables.
	 Give keys to variables.
	-Utilities to compute velocity and (surf) density profiles

Add option to track a given set of halos backwards in time:
	-To a given set of R/Rvir values
	-Make full traceback
	-¿Some kind of continuity into the tracking? Since prior to the
	 infall the halo has accretions and star formation, doesnt seem
	 proper (Ramon does explicitly say his approach doesnt include
	 particle accretion).

Initial merger tree processing, as general as possible:
	-Include option for user specified parameters so that the names do
	 not need to include. Use ytree, so need ytree compatible.
	-Add option for user provided tables. Along with saving and loading, so
	 that tables are created onloy once
	-Add option to create ARRAKIHS_Infall tables based on arbitrary variables
	 and not only R/Rvir (maybe R/Rsplashback etc.)
 	-Add option to select halos at z=0 in a certain region of the 
	 simulation (needs to have a MW-like or more massive host inside; make a 
	 REQUISITE OF THIS).


something like:
>>> simulation = pkg.simulation(..., zoomin=False) #loads whole simulation
>>> region_of_interest = pkg.zoomin(...region to zoom in...) # zone which i want to compute merger trees of
>>>                                                          # not required if zoomin=True
>>> region_of_interest.create_merger_table(... add some parameters ¿? maybe mass threshold ...)
>>> region_of_interest.merger_table.to_csv(... change column names ¿? maybe directly pandas maybe something a bit extra  ...)
>>>
>>> ... region_of_interest would inherit information of snap equivalences, catalogue and snapshot directory etc
>>> region_of_interest.find_candidates(Rvir=X, constraints={...})   # constraints that i now pass in config.yaml
>>>                                                                 # other parameters; pdir, cataloguedir are inherited
>>>                                                                 # from the simulation
>>> region_of_interest.candidates                                                              
>>> region_of_interest.computeX_for_candidates(... list of things to compute ...)
>>> region_of_interest.candidates[0]  <-- returns an instance of zHalo. Can act with profiles etc
>>> region_of_interest.candidates.to_df
>>> region_of_interest.trace_back_candidates(Rvir=[...], ...) #traces back the candidates to desired Rvirs
>>>                                                           #and computes same quantities as before
>>> region_of_interest.candidates[0]  <--- now returns an instance of Halo, containing various quantities across different Rvirs                                                   
>>>                                        If saved now, candidates would produce multiple dataframes, one for each zHalo instance.





# Dynamically visible properties for darkmatter       
    @property
    def rvir(self):
        if self.ptype == "darkmatter":
            value = self.get_shared_attr(self.ptype, "rvir")
            return value if value is None else value.in_units(self.units['length'])
        raise AttributeError("Attribute 'rvir' is hidden for stars.")

    @rvir.setter
    def rvir(self, value):
        if self.ptype == "darkmatter":
            self.update_shared_attr(self.ptype, "rvir", value)
        else:
            raise AttributeError("Cannot set 'rvir' for stars.")

    @property
    def rs(self):
        if self.ptype == "darkmatter":
            value = self.get_shared_attr(self.ptype, "rs")
            return value if value is None else value.in_units(self.units['length'])
        raise AttributeError("Attribute 'rs' is hidden for stars.")

    @rs.setter
    def rs(self, value):
        if self.ptype == "darkmatter":
            self.update_shared_attr(self.ptype, "rs", value)
        else:
            raise AttributeError("Cannot set 'rs' for stars.")

    @property
    def c(self):
        if self.ptype == "darkmatter":
            value = self.get_shared_attr(self.ptype, "c")
            return value if value is None else value.in_units(self.units['dimensionless'])
        raise AttributeError("Attribute 'c' is hidden for stars.")

    @c.setter
    def c(self, value):
        if self.ptype == "darkmatter":
            self.update_shared_attr(self.ptype, "c", value)
        else:
            raise AttributeError("Cannot set 'c' for stars.")


    @property
    def rockstar_center(self):
        if self.ptype == "darkmatter":
            value = self.get_shared_attr(self.ptype, "rockstar_center")
            return value if value is None else value.in_units(self.units['length'])
        raise AttributeError("Attribute 'rockstar_center' is hidden for stars.")

    @rockstar_center.setter
    def rockstar_center(self, value):
        if self.ptype == "darkmatter":
            self.update_shared_attr(self.ptype, "rockstar_center", value)
        else:
            raise AttributeError("Cannot set 'rockstar_center' for stars.")

    @property
    def rockstar_vel(self):
        if self.ptype == "darkmatter":
            value = self.get_shared_attr(self.ptype, "rockstar_vel")
            return value if value is None else value.in_units(self.units['velocity'])
        raise AttributeError("Attribute 'rockstar_vel' is hidden for stars.")

    @rockstar_vel.setter
    def rockstar_vel(self, value):
        if self.ptype == "darkmatter":
            self.update_shared_attr(self.ptype, "rockstar_vel", value)
        else:
            raise AttributeError("Cannot set 'rockstar_vel' for stars.")


    @property
    def vmax(self):
        if self.ptype == "darkmatter":
            value = self.get_shared_attr(self.ptype, "vmax")
            return value if value is None else value.in_units(self.units['velocity'])
        raise AttributeError("Attribute 'vmax' is hidden for stars.")

    @rockstar_vel.setter
    def vmax(self, value):
        if self.ptype == "darkmatter":
            self.update_shared_attr(self.ptype, "vmax", value)
        else:
            raise AttributeError("Cannot set 'vmax' for stars.")

    @property
    def vrms(self):
        if self.ptype == "darkmatter":
            value = self.get_shared_attr(self.ptype, "vrms")
            return value if value is None else value.in_units(self.units['velocity'])
        raise AttributeError("Attribute 'vrms' is hidden for stars.")

    @rockstar_vel.setter
    def vrms(self, value):
        if self.ptype == "darkmatter":
            self.update_shared_attr(self.ptype, "vrms", value)
        else:
            raise AttributeError("Cannot set 'vrms' for stars.")
            
    # Dynamically visible properties for stars
    @property
    def ML(self):
        if self.ptype == "stars":
            value = self.get_shared_attr(self.ptype, "ML")
            return value if value is None else value.in_units("Msun/Lsun")
        raise AttributeError("Attribute 'ML' is hidden for dark matter.")

    @ML.setter
    def ML(self, value):
        if self.ptype == "stars":
            self.update_shared_attr(self.ptype, "ML", value)
        else:
            raise AttributeError("Cannot set 'ML' for dark matter.")

    # "Hidden" properties for the partner instance
    @property
    def _rvir(self):
        if self.ptype == "stars":
            value = self.get_shared_attr("darkmatter", "rvir")
            return value if value is None else value.in_units(self.units['length'])
        raise AttributeError("Attribute '_rvir' is not accessible for dark matter.")

    @property
    def _rs(self):
        if self.ptype == "stars":
            value = self.get_shared_attr("darkmatter", "rs")
            return value if value is None else value.in_units(self.units['length'])
        raise AttributeError("Attribute '_rs' is not accessible for dark matter.")

    @property
    def _c(self):
        if self.ptype == "stars":
            value = self.get_shared_attr("darkmatter", "c")
            return value if value is None else value.in_units(self.units['dimensionless'])
        raise AttributeError("Attribute '_c' is not accessible for dark matter.")

    @property
    def _rockstar_center(self):
        if self.ptype == "stars":
            value = self.get_shared_attr("darkmatter", "rockstar_center")
            return value if value is None else value.in_units(self.units['length'])
        raise AttributeError("Attribute '_rockstar_center' is not accessible for dark matter.")

    @property
    def _rockstar_vel(self):
        if self.ptype == "stars":
            value = self.get_shared_attr("darkmatter", "rockstar_vel")
            return value if value is None else value.in_units(self.units['velocity'])
        raise AttributeError("Attribute '_rockstar_vel' is not accessible for dark matter.")

    @property
    def _ML(self):
        if self.ptype == "darkmatter":
            value = self.get_shared_attr("stars", "ML")
            return value if value is None else value.in_units("Msun/Lsun")
        raise AttributeError("Attribute '_ML' is not accessible for stars.")

    @property
    def _vmax(self):
        if self.ptype == "stars":
            value = self.get_shared_attr("darkmatter", "vmax")
            return value if value is None else value.in_units(self.units['velocity'])
        raise AttributeError("Attribute 'vmax' is hidden for stars.")

    @property
    def _vrms(self):
        if self.ptype == "stars":
            value = self.get_shared_attr("darkmatter", "vrms")
            return value if value is None else value.in_units(self.units['velocity'])
        raise AttributeError("Attribute 'vrms' is hidden for stars.")


	

